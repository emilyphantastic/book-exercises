total_with_discount
total_with_discount <- (tea + 2*scone) - ((tea + 2*scone) * discount)
total_with_discount
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
total_with_discount <- (tea + 2*scone) - ((tea + 2*scone) * discount)
total_with_discount
total_after_tax <- total_with_discount+ round((total_with_discount * sales_tax), 2)
total_after_tax
[earthquakes > 6.5]
earthquakes [earthquakes > 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes [earthquakes > 6.5]
earthquakes[ > 6.5]
# Your script for Part 1 goes here (and delete this comment!)
my_age <- 21
my_name <- "Emily"
make_introduction <- "Hello, my name is", my_name, "and I'm", my_age, "years old.")
return(make_introduction)
make_introduction <- "Hello, my name is", my_name, "and I'm", my_age, "years old.")
make_introduction <- ("Hello, my name is", my_name, "and I'm", my_age, "years old.")
make_introduction <- paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
return(make_introduction)
my_age <- 21
my_name <- "Emily"
make_introduction <- paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
return(make_introduction)
?sub()
return(make_introduction)
#3
make_introduction <- paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
make_introduction <- function() {
intro <- paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(intro)
}
make_introduction(my_name, my_age)
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(causal_intro)
print(casual_intro)
install.package("stringr")
install.packages("stringr")
install.packages("stringr")
#install.packages("stringr")
library("stringr")
#install.packages("stringr")
library("stringr")
#6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#7
intro_e_count <-nchar(my_intro, e)
#7
intro_e_count <-nchar(my_intro, "e")
#7
intro_e_count <-nchar(my_intro, 'e')
#7
intro_e_count <-nchar(my_intro, "e")
#7
intro_e_count <-str_count(my_intro, "e")
print(intro_e_count)
#1
books <= combine("Goodnight Moon", "The Very Hungry Caterpillar", "Where the Wild Things Are", "The Cat in the Hat", "The Giving Tree", "The Invention of Hugo Cabret")
#1
books <- combine("Goodnight Moon", "The Very Hungry Caterpillar", "Where the Wild Things Are", "The Cat in the Hat", "The Giving Tree", "The Invention of Hugo Cabret")
#1
books <- c("Goodnight Moon", "The Very Hungry Caterpillar", "Where the Wild Things Are", "The Cat in the Hat", "The Giving Tree", "The Invention of Hugo Cabret")
print(books)
#2
top_three_books <- books[1:3]
print(top_three_books)
#3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
remove_book <- function(book_titles, index){
new_book_titles <- books[-index]
return(new_book_titles)
}
remove_book
remove_book(books, 5)
books_without_five <- remove_book(books, 5)
print(books_without_five)
#6
long_titles <- books[nchar(books) > 15]
print(long_titles)
#1
numbers <- seq(1:201)
#2
squared_numbers <- numbers * numbers
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
print(squared_median)
#5
perfect_sqaures <- numbers[sqrt(numbers) == round(sqrt(numbers),0)]
print(perfect_sqaures)
#1
spring_break <- Date(2020-03-21)
#1
spring_break <- Date("2020-03-21")
#1
spring_break <- as.Date("2020-03-21")
class(spring_break)
#2
class(spring_break)
#3
today <- Sys.Date()
#4
days_to_break <- today - spring_break
print(days_to_break)
#4
days_to_break <- spring_break - today
print(days_to_break)
date_without_year <- substr(date_string, 5, 10)
change_year <- function(date, year){
date_string <- as.character(date)
date_without_year <- substr(date_string, 5, 10)
new_date <- paste(year, date_without_year)
the_date <- as.Date(new_date)
return(the_date)
}
the_date
change_year
change_year(as.Date("2020-12-15"), 1998)
#5
change_year <- function(date, year){
date_string <- as.character(date)
print(date_string)
date_without_year <- substr(date_string, 5, 10)
print(date_without_year)
new_date <- paste(year, date_without_year)
print(new_date)
the_date <- as.Date(new_date)
print(the_date)
return(the_date)
}
change_year(as.Date("2020-12-15"), 1998)
#5
change_year <- function(date, year){
date_string <- as.character(date)
print(date_string)
date_without_year <- substr(date_string, 5, 10)
print(date_without_year)
new_date <- paste0(year, date_without_year)
print(new_date)
the_date <- as.Date(new_date)
print(the_date)
return(the_date)
}
change_year(as.Date("2020-12-15"), 1998)
#5
change_year <- function(date, year){
date_string <- as.character(date)
date_without_year <- substr(date_string, 5, 10)
new_date <- paste0(year, date_without_year)
the_date <- as.Date(new_date)
return(the_date)
}
change_year(as.Date("2020-12-15"), 1998)
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
date_has_passed <-function(date){
todays_date <- Sys.Date()
return(todays_date - date > 0)
}
date_has_passed(as.Date("2020-01-24"))
date_has_passed(as.Date("2020-01-23"))
date_has_passed(as.Date("2020-01-22"))
date_has_passed(as.Date("2020-01-23"))
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
another_date <- change_year(todays_date, 2000)
}
return(todays_date - another_date > 0)
}
date_has_passed(as.Date("2020-01-24"))
date_has_passed(as.Date("2020-01-23"))
date_has_passed(as.Date("2020-01-25"))
date_has_passed(as.Date("2020-01-22"))
date_has_passed(as.Date("2020-01-22"), ignore_year = TRUE)
date_has_passed(as.Date("2030-01-22"), ignore_year = TRUE)
date_has_passed(as.Date("2030-01-22"), ignore_year = TRUE)
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
another_date <- change_year(another_date, 2000)
}
return(todays_date - another_date > 0)
#7
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
another_date <- change_year(another_date, 2000)
}
return(todays_date - another_date > 0)
}
date_has_passed(as.Date("2030-01-22"), ignore_year = TRUE)
date_has_passed(as.Date("2030-01-22"), ignore_year = TRUE)
date_has_passed(as.Date("2030-01-22"), ignore_year = TRUE)
shit <- date_has_passed(as.Date("2030-01-22"), ignore_year = TRUE)
print(shit)
#7
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
print(todays_date)
another_date <- change_year(another_date, 2000)
print(another_date)
}
return(todays_date - another_date > 0)
}
date_has_passed(as.Date("2030-01-22"), ignore_year = TRUE)
date_has_passed(as.Date(spring_break, ignore_year = TRUE)
spring_break <- as.Date("2020-03-21")
#2
class(spring_break)
#3
today <- Sys.Date()
#4
days_to_break <- spring_break - today
print(days_to_break)
#5
change_year <- function(date, year){
date_string <- as.character(date)
date_without_year <- substr(date_string, 5, 10)
new_date <- paste0(year, date_without_year)
the_date <- as.Date(new_date)
return(the_date)
}
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
print(todays_date)
another_date <- change_year(another_date, 2000)
print(another_date)
}
return(todays_date - another_date > 0)
}
date_has_passed(as.Date(spring_break, ignore_year = TRUE)
#8
#6
spring_break_2025 <- change_year(spring_break, 2025)
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#5
change_year <- function(date, year){
date_string <- as.character(date)
date_without_year <- substr(date_string, 5, 10)
new_date <- paste0(year, date_without_year)
the_date <- as.Date(new_date)
return(the_date)
}
#6
change_year(spring_break, 2025)
#1
spring_break <- as.Date("2020-03-21")
#1
spring_break <- as.Date("2020-03-21")
#2
class(spring_break)
#3
today <- Sys.Date()
#4
days_to_break <- spring_break - today
print(days_to_break)
#5
change_year <- function(date, year){
date_string <- as.character(date)
date_without_year <- substr(date_string, 5, 10)
new_date <- paste0(year, date_without_year)
the_date <- as.Date(new_date)
return(the_date)
}
#6
change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
print(todays_date)
another_date <- change_year(another_date, 2000)
print(another_date)
}
return(todays_date - another_date > 0)
}
date_has_passed(as.Date(spring_break, ignore_year = TRUE)
#8
#9
#10
#11
#12
date_has_passed(as.Date(spring_break, ignore_year = TRUE))
#7
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
print(todays_date)
another_date <- change_year(another_date, 2000)
print(another_date)
}
return(todays_date - another_date > 0)
}
date_has_passed(as.Date(spring_break, ignore_year = TRUE))
date_has_passed(as.Date("2030-01-01"), ignore_year = TRUE))
date_has_passed(as.Date("2030-01-01"), ignore_year = TRUE)
#7
date_has_passed <-function(date, ignore_year = FALSE){
todays_date <- Sys.Date()
another_date <- date
if(ignore_year == TRUE){
todays_date <- change_year(todays_date, 2000)
another_date <- change_year(another_date, 2000)
}
return(todays_date - another_date > 0)
}
date_has_passed(as.Date("2030-01-01"), ignore_year = TRUE)
#8
date_has_passed((as.Date("2020-01-23"))
#8
print(date_has_passed((as.Date("2020-01-23")))
#8
print(date_has_passed((as.Date("2020-01-23")))
#8
print(date_has_passed(as.Date("2020-01-23")))
#8
print(date_has_passed(as.Date("2020-01-23"))
#8
date_has_passed(as.Date("2020-01-23")
#8
date_has_passed(as.Date("2020-01-23"))
#8
print(date_has_passed(as.Date("2020-01-23")))
birthdays <- (Emily = as.Date("1998-12-15"),
Vinny = as.Date("1964-07-13"),
Tracy = as.Date("1974-06-05"),
Eileen = as.Date("2005-11-21"))
birthdays <- list(Emily = as.Date("1998-12-15"),
Vinny = as.Date("1964-07-13"),
Tracy = as.Date("1974-06-05"),
Eileen = as.Date("2005-11-21"))
print(birthdays)
get_next_birthday <- function(birthdate){
next_birthday <- birthdate
if(date_has_passed(birthdate, ignore_year = TRUE)){
next_birthday <- change_year(birthdate, 2021)
} else {
next_birthday <-change_year(birthdate, 2020)
}
return(birthdate)
}
#11
get_next_birthday(birthdats)
#11
get_next_birthday(birthdays)
#11
get_next_birthday(as.Date("1998-12-15"))
#10
get_next_birthday <- function(birthdate){
next_birthday <- birthdate
if(date_has_passed(birthdate, ignore_year = TRUE)){
next_birthday <- change_year(birthdate, 2021)
} else {
next_birthday <-change_year(birthdate, 2020)
}
return(birthdate)
}
#11
get_next_birthday(as.Date("1998-12-15"))
et_next_birthday <- function(birthdate){
next_birthday <- birthdate
if(date_has_passed(birthdate, ignore_year = TRUE)){
next_birthday <- change_year(birthdate, 2021)
print(next_birthday)
} else {
next_birthday <-change_year(birthdate, 2020)
print(next_birthday)
}
return(birthdate)
}
get_next_birthday <- function(birthdate){
next_birthday <- birthdate
if(date_has_passed(birthdate, ignore_year = TRUE)){
next_birthday <- change_year(birthdate, 2021)
print(next_birthday)
} else {
next_birthday <-change_year(birthdate, 2020)
print(next_birthday)
}
return(birthdate)
}
#11
get_next_birthday(as.Date("1998-12-15"))
return(next_birthday)
get_next_birthday <- function(birthdate){
next_birthday <- birthdate
if(date_has_passed(birthdate, ignore_year = TRUE)){
next_birthday <- change_year(birthdate, 2021)
print(next_birthday)
} else {
next_birthday <-change_year(birthdate, 2020)
print(next_birthday)
}
return(next_birthday)
}
get_next_birthday(as.Date("1998-12-15"))
get_next_birthday <- function(birthdate){
next_birthday <- birthdate
if(date_has_passed(birthdate, ignore_year = TRUE)){
next_birthday <- change_year(birthdate, 2021)
} else {
next_birthday <-change_year(birthdate, 2020)
}
return(next_birthday)
}
#11
get_next_birthday(as.Date("1998-12-15"))
#11
get_next_birthday(birthdays$Emily)
#12
next_birthdays <- lapply(birthdays, get_next_birthday)
#12
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salary$salaries_2017 + salaries$adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Empoyee 57", "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries(salaries[salaries$employees == "Empoyee 57", "salaries_2018"])
# What was the 2018 salary of Employee 57
print(salaries(salaries[salaries$employees == "Empoyee 57", "salaries_2018"])
# What was the 2018 salary of Employee 57
print(salaries(salaries[salaries$employees == "Empoyee 57", "salaries_2018"])
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Empoyee 57", "salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Empoyee 57", "salaries_2018"])
View(salaries)
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
#biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE, ]
mean(paycut$adjustments)
